openapi: 3.0.3
info:
  title: {{.ServiceNameCap}} API
  description: A MicroLib-based REST API service for {{.ServiceName}}
  version: 1.0.0
  contact:
    name: {{.Author}}
    email: {{.Author}}@example.com
  license:
    name: {{.License}}

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.{{.ServiceName}}.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Returns the overall health status of the service and its dependencies
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /health/live:
    get:
      summary: Liveness probe
      description: Returns 200 if the service is running (for Kubernetes liveness probe)
      operationId: getLiveness
      tags:
        - Health
      responses:
        '200':
          description: Service is alive
          content:
            text/plain:
              schema:
                type: string
                example: OK

  /health/ready:
    get:
      summary: Readiness probe
      description: Returns 200 if the service is ready to accept traffic (for Kubernetes readiness probe)
      operationId: getReadiness
      tags:
        - Health
      responses:
        '200':
          description: Service is ready
          content:
            text/plain:
              schema:
                type: string
                example: Ready

  /api/v1/ping:
    get:
      summary: Ping endpoint
      description: Simple ping endpoint for testing connectivity
      operationId: ping
      tags:
        - Utility
      responses:
        '200':
          description: Pong response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'

  /api/v1/users:
    get:
      summary: List users
      description: Retrieve a list of all users
      operationId: listUsers
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    description: Total number of users
                  limit:
                    type: integer
                    description: Limit used in the request
                  offset:
                    type: integer
                    description: Offset used in the request
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create user
      description: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
          example: 1
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
        name:
          type: string
          description: User full name
          example: John Doe
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
          example: "2023-01-01T00:00:00Z"

    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
        name:
          type: string
          description: User full name
          example: John Doe

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
        name:
          type: string
          description: User full name
          example: John Doe

    HealthResponse:
      type: object
      required:
        - status
        - service
        - version
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall health status
          example: healthy
        service:
          type: string
          description: Service name
          example: {{.ServiceName}}
        version:
          type: string
          description: Service version
          example: 1.0.0
        checks:
          type: object
          additionalProperties:
            type: string
          description: Individual dependency health checks
          example:
            database: healthy
            cache: healthy

    PingResponse:
      type: object
      required:
        - message
        - service
      properties:
        message:
          type: string
          description: Ping response message
          example: pong
        service:
          type: string
          description: Service name
          example: {{.ServiceName}}

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: Invalid request data
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []