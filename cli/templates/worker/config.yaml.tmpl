service:
  instance: "{{.ServiceName}}-1"
  build_hash: "${BUILD_HASH:-dev}"

http:
  port: 8080
  host: "0.0.0.0"
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 120s

database:
  host: "${DB_HOST:-localhost}"
  port: ${DB_PORT:-5432}
  user: "${DB_USER:-postgres}"
  password: "${DB_PASSWORD:-postgres}"
  database: "${DB_NAME:-{{.ServiceName}}_db}"
  ssl_mode: "${DB_SSL_MODE:-disable}"
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: 300s

jobs:
  enabled: true
  queue:
    type: "postgres"
    postgres:
      table_name: "job_queue"
      poll_interval: 5s
      max_workers: 10
    redis:
      key_prefix: "{{.ServiceName}}:jobs"
      poll_interval: 5s
      max_workers: 10
  retry:
    max_retries: 3
    initial_interval: 30s
    max_interval: 300s
    multiplier: 2.0

{{- if .WithMessaging}}
messaging:
  broker_type: "${MESSAGING_BROKER_TYPE:-rabbitmq}"
  rabbitmq:
    url: "${RABBITMQ_URL:-amqp://guest:guest@localhost:5672/}"
    exchange: "{{.ServiceName}}-events"
    exchange_type: "topic"
    queue_prefix: "{{.ServiceName}}"
    prefetch_count: 10
  kafka:
    brokers:
      - "${KAFKA_BROKER:-localhost:9092}"
    consumer_group: "{{.ServiceName}}-consumers"
    auto_offset_reset: "earliest"
{{- end}}

logging:
  level: "${LOG_LEVEL:-info}"
  format: "${LOG_FORMAT:-json}"
  add_source: false

observability:
  service_name: "{{.ServiceName}}"
  service_version: "1.0.0"
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"
  tracing:
    enabled: true
    endpoint: "${OTEL_EXPORTER_OTLP_ENDPOINT:-http://localhost:4317}"
    sample_rate: 0.1
  health:
    enabled: true