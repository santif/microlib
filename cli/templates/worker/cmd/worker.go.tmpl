package cmd

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/santif/microlib/core"
	"github.com/santif/microlib/config"
	"github.com/santif/microlib/observability"
	"github.com/santif/microlib/http"
	"github.com/santif/microlib/data"
	"github.com/santif/microlib/jobs"
	{{- if .WithMessaging}}
	"github.com/santif/microlib/messaging"
	{{- end}}

	appconfig "{{.ModuleName}}/internal/config"
	"{{.ModuleName}}/internal/handlers"
	jobhandlers "{{.ModuleName}}/internal/jobs"
	"{{.ModuleName}}/internal/services"
)

// Run starts the {{.ServiceName}} worker service
func Run(ctx context.Context) error {
	// Load configuration
	cfg, err := loadConfig()
	if err != nil {
		return fmt.Errorf("loading configuration: %w", err)
	}

	// Initialize logger
	logger := observability.NewLogger(cfg.Logging)
	slog.SetDefault(logger.Slog())

	// Initialize observability
	obs, err := observability.New(cfg.Observability)
	if err != nil {
		return fmt.Errorf("initializing observability: %w", err)
	}
	defer obs.Shutdown(ctx)

	// Initialize database
	db, err := data.NewPostgresDB(ctx, cfg.Database)
	if err != nil {
		return fmt.Errorf("connecting to database: %w", err)
	}
	defer db.Close()

	{{- if .WithMessaging}}
	// Initialize messaging broker
	broker, err := messaging.NewBroker(cfg.Messaging)
	if err != nil {
		return fmt.Errorf("initializing messaging: %w", err)
	}
	defer broker.Close()
	{{- end}}

	// Initialize services
	notificationService := services.NewNotificationService(services.NotificationServiceConfig{
		Logger: logger,
		DB:     db,
		{{- if .WithMessaging}}
		Broker: broker,
		{{- end}}
	})

	// Initialize job queue
	jobQueue, err := jobs.NewJobQueue(cfg.Jobs)
	if err != nil {
		return fmt.Errorf("initializing job queue: %w", err)
	}

	// Initialize job handlers
	jobHandlers := jobhandlers.New(jobhandlers.Config{
		Logger:              logger,
		NotificationService: notificationService,
	})

	// Create service metadata
	metadata := core.ServiceMetadata{
		Name:      "{{.ServiceName}}",
		Version:   "1.0.0",
		Instance:  cfg.Service.Instance,
		BuildHash: cfg.Service.BuildHash,
	}

	// Create service
	service := core.NewService(metadata)

	// Register dependencies for health checks
	service.RegisterDependency("database", db)
	service.RegisterDependency("job_queue", jobQueue)
	{{- if .WithMessaging}}
	service.RegisterDependency("messaging", broker)
	{{- end}}

	// Initialize health check handlers (minimal HTTP server for health checks)
	h := handlers.New(handlers.Config{
		Logger: logger,
	})

	// Initialize minimal HTTP server for health checks
	httpServer := http.NewServer(cfg.HTTP)
	h.RegisterHTTPRoutes(httpServer)

	// Start service
	return service.Run(ctx, func(ctx context.Context) error {
		// Start health check HTTP server
		go func() {
			if err := httpServer.Start(ctx); err != nil {
				logger.Error("HTTP server failed", "error", err)
			}
		}()

		// Start job processing
		go func() {
			if err := jobQueue.Process(ctx, jobHandlers.ProcessJob); err != nil {
				logger.Error("Job processing failed", "error", err)
			}
		}()

		{{- if .WithMessaging}}
		// Start message processing
		go func() {
			if err := broker.Subscribe("notifications", jobHandlers.HandleNotificationMessage); err != nil {
				logger.Error("Message processing failed", "error", err)
			}
		}()
		{{- end}}

		// Wait for context cancellation
		<-ctx.Done()

		// Graceful shutdown
		httpServer.Shutdown(ctx)
		jobQueue.Stop(ctx)

		return nil
	})
}

// loadConfig loads the service configuration
func loadConfig() (*appconfig.Config, error) {
	manager := config.NewManager()
	
	// Add configuration sources in priority order
	manager.AddSource(config.NewEnvSource())
	manager.AddSource(config.NewFileSource("config.yaml"))
	
	var cfg appconfig.Config
	if err := manager.Load(&cfg); err != nil {
		return nil, err
	}
	
	if err := manager.Validate(&cfg); err != nil {
		return nil, err
	}
	
	return &cfg, nil
}